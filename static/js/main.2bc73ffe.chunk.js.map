{"version":3,"sources":["AxisX.js","AxisY.js","AxisLabel.js","Irises.js","ColorLegend.js","Graph.js","AxisXDropdown.js","AxisYDropdown.js","App.js","index.js"],"names":["AxisBottom","xScale","innerHeight","ticks","map","tickValue","transform","stroke","y2","y","dy","style","textAnchor","AxisLeft","yScale","innerWidth","x2","x","AxisLabel","labelText","rotate","className","Irises","data","xValue","yValue","circleRadius","colorMap","d","cx","cy","r","fill","species","ColorLegend","Object","keys","idx","Graph","xAxisLabel","yAxisLabel","bodyHeight","bodyWidth","useState","setData","height","width","margin","top","right","bottom","left","useEffect","csv","sepal_length","sepal_width","petal_length","petal_width","then","scaleLinear","domain","extent","range","nice","viewBox","AxisX","label","AxisY","AxisXDropdown","id","onChange","value","selected","AxisYDropdown","App","xLabel","setXLabel","yLabel","setYLabel","document","body","clientWidth","clientHeight","console","log","href","target","htmlFor","e","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.2bc73ffe.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nconst AxisBottom = ({xScale,innerHeight}) => {\r\n  return (\r\n    \r\n    xScale.ticks().map(tickValue => {\r\n            return (\r\n              <g key={tickValue} transform = {`translate(${xScale(tickValue)},${0})`}>\r\n                <line stroke=\"rgba(0,0,0,.2)\" y2={innerHeight} />              \r\n                <text y={innerHeight + 5} dy=\".72em\" style={{textAnchor: \"middle\"}}>{tickValue}</text>\r\n              </g>\r\n            )\r\n          })\r\n  \r\n  )\r\n}\r\n\r\nexport default AxisBottom\r\n","import React from 'react'\r\n\r\nconst AxisLeft = ({yScale,innerWidth}) => {\r\n  return (\r\n    yScale.ticks().map(tickValue => {\r\n            return (\r\n              <g key={tickValue} transform = {`translate(${0},${yScale(tickValue)})`}>\r\n                <line stroke=\"rgba(0,0,0,.2)\" x2={innerWidth} />              \r\n                <text x={0 - 5}  style={{textAnchor: \"end\"}}>{tickValue}</text>\r\n              </g>\r\n            )\r\n          })\r\n  )\r\n}\r\n\r\nexport default AxisLeft\r\n","import React from 'react'\r\n\r\nconst AxisLabel = ({x = 0,y = 0,labelText,rotate}) => {\r\n  return (\r\n    <text\r\n      className=\"axis-label\"\r\n      x={rotate ? 0 : x}\r\n      y={rotate ? 0 : y}\r\n      textAnchor=\"middle\"\r\n      transform = {rotate ? `translate(${x},${y}) rotate(${rotate ? -90 : 0})` : \"\"}\r\n    >\r\n      {labelText}\r\n    </text>\r\n  )\r\n}\r\n\r\nexport default AxisLabel ","import React from 'react'\r\n\r\nconst Irises = ({ data, xScale, yScale, xValue, yValue, circleRadius,colorMap }) => {\r\n\r\n  return (\r\n    data.map(d => <circle cx={xScale(xValue(d))} cy={yScale(yValue(d))} r={circleRadius} fill={colorMap[d.species]} />)\r\n  )\r\n}\r\n\r\nexport default Irises\r\n","import React from 'react'\r\n\r\nconst ColorLegend = ({colorMap}) => {\r\n  return (\r\n    Object.keys(colorMap).map((species,idx) => \r\n      (\r\n        <g transform={`translate(0,${idx*40})`}>\r\n          <circle fill={colorMap[species]} r={7} />\r\n        <text className=\"axis-label\" x={10} y={4}>{species}</text>\r\n        </g>        \r\n      )\r\n    )\r\n  )\r\n}\r\n\r\nexport default ColorLegend\r\n","import React,{useEffect,useState} from 'react'\r\nimport { csv, scaleLinear, extent } from 'd3'\r\nimport AxisX from './AxisX';\r\nimport AxisY from './AxisY';\r\nimport AxisLabel from './AxisLabel';\r\nimport Irises from './Irises';\r\nimport ColorLegend from \"./ColorLegend\"\r\n\r\n\r\nconst Graph = ({ xAxisLabel,yAxisLabel,bodyHeight,bodyWidth }) => {\r\n\r\n  const [data, setData] = useState(null);\r\n  const url = \"https://gist.githubusercontent.com/curran/a08a1080b88344b0c8a7/raw/iris.csv\"\r\n  const height = bodyHeight*.8;\r\n  const width = bodyWidth*.8;\r\n  const margin = { top: height/12, right: width/7, bottom: height/7.5, left: width/12.5 }\r\n  useEffect(() => {\r\n    const row = d => {\r\n      d.sepal_length = +d.sepal_length\r\n      d.sepal_width = +d.sepal_width\r\n      d.petal_length = +d.petal_length\r\n      d.petal_width = +d.petal_width\r\n      return d\r\n    }\r\n    csv(url, row).then(setData)\r\n  \r\n  }, [])\r\n\r\n  const colorMap = {\r\n    \"setosa\": \"#A37FCF\",\r\n    \"virginica\": \"#442978\",\r\n    \"versicolor\": \"#56AFB5\",\r\n  }\r\n\r\n\r\n  let xValue;\r\n  if (xAxisLabel === \"Sepal Length\") {\r\n    xValue = d => d.sepal_length;\r\n  } else if (xAxisLabel === \"Sepal Width\") {\r\n    xValue = d => d.sepal_width;\r\n  } else if (xAxisLabel === \"Petal Length\") {\r\n    xValue = d => d.petal_length;\r\n  }else{\r\n    xValue = d => d.petal_width;\r\n  }\r\n\r\n  const xAxisLabelOffset = 50;\r\n\r\n  let yValue;\r\n  if (yAxisLabel === \"Sepal Length\") {\r\n    yValue = d => d.sepal_length;\r\n  } else if (yAxisLabel === \"Sepal Width\") {\r\n    yValue = d => d.sepal_width;\r\n  } else if (yAxisLabel === \"Petal Length\") {\r\n    yValue = d => d.petal_length;\r\n  }else{\r\n    yValue = d => d.petal_width;\r\n  }\r\n\r\n  const yAxisLabelOffset = 50;\r\n\r\n  const innerHeight = height - margin.top - margin.bottom;\r\n  const innerWidth = width - margin.left - margin.right;\r\n  const xScale = data ? scaleLinear().domain(extent(data, xValue)).range([0, innerWidth]).nice() : null\r\n  const yScale = data ? scaleLinear().domain(extent(data, yValue)).range([innerHeight, 0]) : null\r\n  \r\n\r\n\r\n  if (!data) {\r\n    return (\r\n      <p>Loading...</p>\r\n    )\r\n  } else {\r\n    return (\r\n      <svg className=\"graph\" viewBox={`0 0 ${width} ${height}`} >\r\n        <g transform={`translate(${margin.left},${margin.top})`}>\r\n          \r\n\r\n          \r\n          <AxisX xScale={xScale} innerHeight={innerHeight} label={xAxisLabel} />          \r\n          <AxisY yScale={yScale} innerWidth={innerWidth} />\r\n\r\n          <Irises\r\n            data={data}\r\n            xScale={xScale}\r\n            yScale={yScale}\r\n            xValue={xValue}\r\n            yValue={yValue}\r\n            circleRadius={6}\r\n            colorMap = {colorMap}\r\n          />\r\n          <g transform={`translate(${innerWidth + 35},70)`}>\r\n            <AxisLabel\r\n              x={ 30 }\r\n              y={ -25 }\r\n            labelText= {\"Color Legend\"}\r\n          />\r\n            <ColorLegend colorMap={colorMap} />\r\n          </g>\r\n          <AxisLabel\r\n            x={innerWidth/2}\r\n            y={innerHeight + xAxisLabelOffset}\r\n            labelText= {xAxisLabel}\r\n          />\r\n\r\n          <AxisLabel\r\n            x={-yAxisLabelOffset}\r\n            y={innerHeight/2}\r\n            labelText={yAxisLabel}\r\n            rotate={true}\r\n          />\r\n          \r\n          \r\n        \r\n        </g>\r\n\r\n      </svg>\r\n    )\r\n\r\n  }\r\n}\r\n\r\nexport default Graph\r\n","import React from 'react'\r\n\r\nconst AxisXDropdown = ({ id,onChange}) => {\r\n  return (\r\n    <select id={id} onChange={onChange}>\r\n      <option value=\"\">Please select an option</option>\r\n      <option value=\"Sepal Length\" selected=\"selected\">Sepal Length</option>\r\n      <option value=\"Sepal Width\">Sepal Width</option>\r\n      <option value=\"Petal Length\">Petal Length</option>\r\n      <option value=\"Petal Width\">Petal Width</option>\r\n      \r\n    </select>\r\n  )\r\n}\r\n\r\nexport default AxisXDropdown\r\n","import React from 'react'\r\n\r\nconst AxisYDropdown = ({ id,onChange}) => {\r\n  return (\r\n    <select id={id} onChange={onChange}>\r\n      <option value=\"\">Please select an option</option>\r\n      <option value=\"Sepal Length\" >Sepal Length</option>\r\n      <option value=\"Sepal Width\" selected=\"selected\">Sepal Width</option>\r\n      <option value=\"Petal Length\">Petal Length</option>\r\n      <option value=\"Petal Width\">Petal Width</option>\r\n      \r\n    </select>\r\n  )\r\n}\r\n\r\nexport default AxisYDropdown\r\n","import React, { useState,useEffect} from 'react'\r\nimport Graph from './Graph'\r\nimport AxisXDropdown from './AxisXDropdown'\r\nimport AxisYDropdown from './AxisYDropdown'\r\n\r\nconst App = () => {\r\n  const [xLabel, setXLabel] = useState(\"Sepal Length\");\r\n  const [yLabel, setYLabel] = useState(\"Sepal Width\");\r\n  const [bodyWidth, setBodyWidth] = useState(document.body.clientWidth)\r\n  const [bodyHeight, setBodyHeight] = useState(document.body.clientHeight)\r\n  \r\n\r\n\r\n  console.log(bodyHeight,bodyWidth)\r\n  \r\n  \r\n  \r\n  const changeX = (e) => {\r\n    setXLabel(e.target.value)\r\n  }\r\n\r\n  const changeY = (e) => {\r\n    setYLabel(e.target.value)\r\n  }\r\n\r\n\r\n\r\n  return (\r\n    <>\r\n      <div className=\"container\">\r\n      <div>\r\n      <h1>Exploring the Iris Dataset</h1>\r\n        <p>\r\n          The graph below visually compares four features of 3 different species of Iris flowers from the <a href=\"https://en.wikipedia.org/wiki/Iris_flower_data_set\" target=\"_blank\">Iris Data Set</a>: Iris Setosa, Iris Versicolor, Iris Virginica. Compare the different features. Can you tell the different species apart without using the color legend?\r\n        </p>\r\n      <div className=\"center-content\">\r\n        <div className=\"center-content\">\r\n          <label htmlFor=\"xLabel\">X Axis Value</label>\r\n          <AxisXDropdown id=\"xLabel\" onChange={changeX}/>\r\n        </div>\r\n        \r\n        <div className=\"center-content\">\r\n          <label htmlFor=\"xLabel\">Y Axis Value</label>\r\n          <AxisYDropdown id=\"yLabel\" onChange={changeY} />\r\n        </div>\r\n        </div>\r\n        </div>\r\n        <Graph xAxisLabel={xLabel} yAxisLabel={yLabel} bodyHeight={bodyHeight} bodyWidth={bodyWidth} />\r\n        </div>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default App\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n"],"sourceRoot":""}